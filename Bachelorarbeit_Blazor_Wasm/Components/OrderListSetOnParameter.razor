@inherits BenchmarkComponent

<h3>OrderListSetOnParameter</h3>

<div id="@OrderGuid" class="card mx-auto w-75 shadow-sm">
    <div class="card-header bg-primary text-white">
        <h3 class="card-title mb-0">Order @OrderGuid</h3>
    </div>
    <div class="card-body">
        <table class="table table-striped">
            <tbody>
                <tr>
                    <th>Customer</th>
                    <td>@FirstName @LastName</td>
                </tr>
                <tr>
                    <th>Address</th>
                    <td>@Street @StreetNumber, @City, @ZipCode, @Country</td>
                </tr>
                <tr>
                    <th>Order Date</th>
                    <td>@OrderDate.ToString("dd. MM. yyyy")</td>
                </tr>
                <tr>
                    <th>Status</th>
                    <td>@OrderStatus</td>
                </tr>
                <tr>
                    <th>PhoneNumber</th>
                    <td>@PhoneNumber</td>
                </tr>
                <tr>
                    <th>Email</th>
                    <td>@Email</td>
                </tr>
                <tr>
                    <th>IBAN</th>
                    <td>@IBAN</td>
                </tr>
            </tbody>
        </table>

        <h4 class="mt-4">Items</h4>
        <table class="table table-bordered">
            <thead class="table-light">
                <tr>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Material</th>
                    <th>Color</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in OrderItems)
                {
                    <tr>
                        <td>@item.Item.Name</td>
                        <td>@item.Item.ProductMaterial</td>
                        <td>@item.Item.Color</td>
                        <td>@item.Item.Category</td>
                        <td>@item.Quantity</td>
                        <td>@item.Item.Price.ToString("C")</td>
                        <td>@((item.Quantity * item.Item.Price).ToString("C"))</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public Guid OrderGuid { get; set; } = Guid.NewGuid();

    [Parameter]
    public string FirstName { get; set; } = string.Empty;

    [Parameter]
    public string LastName { get; set; } = string.Empty;

    [Parameter]
    public string City { get; set; } = string.Empty;

    [Parameter]
    public string Street { get; set; } = string.Empty;

    [Parameter]
    public int StreetNumber { get; set; }

    [Parameter]
    public string ZipCode { get; set; } = string.Empty;

    [Parameter]
    public string Country { get; set; } = string.Empty;

    [Parameter]
    public DateTimeOffset OrderDate { get; set; }

    [Parameter]
    public OrderState OrderStatus { get; set; }
    [Parameter]
    public string PhoneNumber { get; set; } = string.Empty;

    [Parameter]
    public string Email { get; set; } = string.Empty;

    [Parameter]
    public string IBAN { get; set; } = string.Empty;

    [Parameter]
    public List<(StockItem Item, int Quantity)> OrderItems { get; set; } = new();


    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.BenchmarkUtil.StartWatch();
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(OrderGuid):
                    OrderGuid = (Guid)parameter.Value;
                    break;
                case nameof(FirstName):
                    FirstName = (string)parameter.Value;
                    break;
                case nameof(LastName):
                    LastName = (string)parameter.Value;
                    break;
                case nameof(City):
                    City = (string)parameter.Value;
                    break;
                case nameof(Street):
                    Street = (string)parameter.Value;
                    break;
                case nameof(StreetNumber):
                    StreetNumber = (int)parameter.Value;
                    break;
                case nameof(ZipCode):
                    ZipCode = (string)parameter.Value;
                    break;
                case nameof(Country):
                    Country = (string)parameter.Value;
                    break;
                case nameof(OrderDate):
                    OrderDate = (DateTimeOffset)parameter.Value;
                    break;
                case nameof(OrderStatus):
                    OrderStatus = (OrderState)parameter.Value;
                    break;
                case nameof(PhoneNumber):
                    PhoneNumber = (string)parameter.Value;
                    break;
                case nameof(Email):
                    Email = (string)parameter.Value;
                    break;
                case nameof(IBAN):
                    IBAN = (string)parameter.Value;
                    break;
                case nameof(OrderItems):
                    OrderItems = (List<(StockItem Item, int Quantity)>)parameter.Value;
                    break;
            }
        }
        return base.SetParametersAsync(ParameterView.Empty);
    }

}
